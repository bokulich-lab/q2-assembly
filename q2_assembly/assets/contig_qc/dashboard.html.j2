<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Contig QC Dashboard (Vega-Lite)</title>
  <script src="https://cdn.jsdelivr.net/npm/vega@5"></script>
  <script src="https://cdn.jsdelivr.net/npm/vega-lite@5"></script>
  <script src="https://cdn.jsdelivr.net/npm/vega-embed@6"></script>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body { font-family: 'Open Sans', Arial, sans-serif; background: #fafbfc; }
    .dashboard-title { margin-top: 30px; margin-bottom: 30px; }
    .dashboard-row { margin-bottom: 30px; }
    .plot-box { min-height: 400px; width: 100%; margin-bottom: 30px; }
    .selector-row { margin-bottom: 20px; }
    .custom-dropdown { min-width: 180px; }
  </style>
</head>
<body>
  <div class="container-fluid">
    <h2 class="dashboard-title text-center">Contig QC Dashboard (Vega-Lite)</h2>
    <div class="row justify-content-center">
      <div class="col-lg-10 col-xl-8">
        <div class="mx-4">
          <div class="row selector-row justify-content-center mb-4">
            <div class="col-auto">
              <label for="categoryDropdown" class="form-label fw-bold">Category:</label>
              <select id="categoryDropdown" class="form-select custom-dropdown">
                <!-- Options will be populated by JS -->
              </select>
            </div>
            <div class="col-auto">
              <label for="valueDropdown" class="form-label fw-bold">Value:</label>
              <select id="valueDropdown" class="form-select custom-dropdown">
                <!-- Options will be populated by JS -->
              </select>
            </div>
          </div>
          <div class="row dashboard-row justify-content-center">
            <div class="col-12" id="vega-dashboard"></div>
          </div>
          <div class="row">
            <div class="col text-center text-muted" style="font-size: 0.95em;">
              Tip: <b>Double-click</b> a legend item to show all samples.
            </div>
          </div>
          <!-- Boxplot Section -->
          <div class="row mt-5 mb-4 justify-content-center">
            <div class="col-auto">
              <label for="boxCategoryDropdown" class="form-label fw-bold">Boxplot Category:</label>
              <select id="boxCategoryDropdown" class="form-select custom-dropdown">
                <!-- Options will be populated by JS -->
              </select>
            </div>
            <div class="col-auto">
              <label for="boxMetricDropdown" class="form-label fw-bold">Metric:</label>
              <select id="boxMetricDropdown" class="form-select custom-dropdown">
                <option value="count">Contig Count</option>
                <option value="n50">N50</option>
                <option value="n90">N90</option>
                <option value="total_length">Total Assembly Length</option>
              </select>
            </div>
          </div>
          <div class="row dashboard-row justify-content-center">
            <div class="col-12" id="boxplot-dashboard"></div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <script>
    // --- Data injected from Python ---
    const categories = {{ categories | safe }};
    const values = {{ values | safe }};
    const sampleMetricsArr = {{ sample_metrics | safe }};
    const vegaSpec = {{ vega_spec_json | safe }};
  </script>
  <script>
    // Populate category dropdown
    const categoryDropdown = document.getElementById('categoryDropdown');
    categories.forEach(cat => {
      const opt = document.createElement('option');
      opt.value = cat;
      opt.textContent = cat.charAt(0).toUpperCase() + cat.slice(1);
      categoryDropdown.appendChild(opt);
    });
    // Helper to update value dropdown
    function updateValueDropdown(category, selectedValue) {
      const valueDropdown = document.getElementById('valueDropdown');
      valueDropdown.innerHTML = '';
      // Add 'All' option
      const allOpt = document.createElement('option');
      allOpt.value = 'All';
      allOpt.textContent = 'All';
      if (selectedValue === 'All') allOpt.selected = true;
      valueDropdown.appendChild(allOpt);
      if (values[category]) {
        values[category].forEach(v => {
          const opt = document.createElement('option');
          opt.value = v;
          opt.textContent = v;
          if (v === selectedValue) opt.selected = true;
          valueDropdown.appendChild(opt);
        });
      }
    }

    // Initial dropdown population
    const initialCategory = categories[0];
    updateValueDropdown(initialCategory, 'All');
    document.getElementById('categoryDropdown').value = initialCategory;

    // Populate boxplot category dropdown
    const boxCategoryDropdown = document.getElementById('boxCategoryDropdown');
    categories.forEach(cat => {
      const opt = document.createElement('option');
      opt.value = cat;
      opt.textContent = cat.charAt(0).toUpperCase() + cat.slice(1);
      boxCategoryDropdown.appendChild(opt);
    });
    // Set default boxplot category
    boxCategoryDropdown.value = initialCategory;

    // Render the dashboard and keep a reference to the view
    let vegaView = null;
    vegaEmbed('#vega-dashboard', vegaSpec, {actions: true}).then(res => {
      vegaView = res.view;
      // Apply initial filters so the first “All” → X swap doesn’t clear everything
      vegaView.signal('category_param', initialCategory)
              .signal('value_param', 'All')
              .runAsync();
      // Listen for sample selection in the plots
      vegaView.addSignalListener('sample_select', (name, value) => {
        // No-op: sample selection in plot does not update dropdowns when 'sample' is not a filterable category
      });
    });

    // Dropdown event listeners
    document.getElementById('categoryDropdown').addEventListener('change', function() {
      const category = this.value;
      // Update value dropdown to show only relevant values
      updateValueDropdown(category, 'All');
      // Update Vega params
      if (vegaView) {
        vegaView.signal('category_param', category).signal('value_param', 'All').runAsync();
      }
    });
    document.getElementById('valueDropdown').addEventListener('change', function() {
      const value = this.value;
      if (vegaView) {
        vegaView.signal('value_param', value).runAsync();
      }
    });

    // --- Boxplot Data Preparation ---
    // --- Boxplot Rendering Function ---
    function renderBoxplot(category, metric) {
      const metricTitles = {
        count: 'Contig Count',
        n50: 'N50',
        n90: 'N90',
        total_length: 'Total Assembly Length'
      };
      const boxSpec = {
        $schema: 'https://vega.github.io/schema/vega-lite/v5.json',
        description: 'Boxplot of per-sample metrics by category',
        data: {values: sampleMetricsArr},
        width: 'container',
        height: 400,
        mark: {type: 'boxplot', extent: 'min-max'},
        encoding: {
          x: {field: category, type: 'nominal', title: category.charAt(0).toUpperCase() + category.slice(1)},
          y: {field: metric, type: 'quantitative', title: metricTitles[metric]},
          color: {field: category, type: 'nominal', scale: {scheme: 'viridis'}, legend: {orient: 'right'}},
          tooltip: [
            {field: category, type: 'nominal'},
            {field: metric, type: 'quantitative'}
          ]
        },
        config: {
          boxplot: {median: {color: '#222', size: 3}},
          axis: {
            grid: true,
            gridColor: '#eaeaea',
            gridWidth: 1,
            tickColor: '#888',
            labelFont: 'Open Sans, Arial, sans-serif',
            labelFontSize: 14,
            titleFont: 'Open Sans, Arial, sans-serif',
            titleFontSize: 16,
            titleFontWeight: 'bold',
            domain: false
          },
          legend: {
            orient: 'right',
            labelFont: 'Open Sans, Arial, sans-serif',
            labelFontSize: 14,
            titleFont: 'Open Sans, Arial, sans-serif',
            titleFontSize: 15,
            symbolType: 'circle',
            symbolSize: 120
          },
          view: {
            stroke: '#eaeaea',
            strokeWidth: 1
          },
          title: {
            font: 'Open Sans, Arial, sans-serif',
            fontSize: 18,
            fontWeight: 'bold',
            anchor: 'middle',
            color: '#222'
          }
        },
        title: metricTitles[metric] + ' per Sample by ' + category.charAt(0).toUpperCase() + category.slice(1)
      };
      vegaEmbed('#boxplot-dashboard', boxSpec, {actions: false});
    }

    // Initial boxplot render
    renderBoxplot(initialCategory, 'count');
    document.getElementById('boxCategoryDropdown').addEventListener('change', function() {
      renderBoxplot(this.value, document.getElementById('boxMetricDropdown').value);
    });
    document.getElementById('boxMetricDropdown').addEventListener('change', function() {
      renderBoxplot(document.getElementById('boxCategoryDropdown').value, this.value);
    });
  </script>
</body>
</html> 